<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.pjt.core.emoticon.repository.EmoticonMapper">

<sql id="emoticonSort">
    <if test=' searchCode != null and searchCode != "" '>
        <choose>
            <when test=' searchCode == "popularity" '>
                <!-- 인기순 정렬(+ 가나다순) -->
                order by favorite_count desc, emoticon_title asc
            </when>
            <when test=' searchCode == "latest" '>
                <!-- 최신순 정렬(+ 가나다순) -->
                order by reg_dt desc, emoticon_title asc
            </when>
        </choose>
    </if>
</sql>

    <!-- 이모티콘 전체 목록 조회 -->
    <select id="getEmoticonList"
            parameterType="com.pjt.core.emoticon.dto.ReadEmoticonRequestDto"
            resultType="com.pjt.core.emoticon.dto.ReadEmoticonResponseDto">
        /* emoticonMapper.getEmoticonList */
        select
               e.emoticon_id
             , e.emoticon_title
             , e.emoticon_price
             , (select count(*)
                from favorite f
                where f.emoticon_id = e.emoticon_id
                ) as favorite_count
             , (select
                    case when count(b.emoticon_id) >= 1 then 'Y'
                         else 'N'
                     end
                  from favorite b
                 where b.emoticon_id = e.emoticon_id
                  and b.user_id = #{userId}
                ) as favorite_yn
         from emoticon e
        <include refid="emoticonSort" />
    </select>

    <!-- 이모티콘 상세 정보 조회 -->
    <select id="getDetailEmoticon"
            parameterType="int"
            resultType="com.pjt.core.emoticon.dto.EmoticonDetail">
        /* emoticonMapper.getDetailEmoticon */
        select
            a.emoticon_detail_id
             , a.emoticon_id
             , a.emoticon_nm
             , a.reg_dt
             , a.reg_id
             , b.emoticon_img_no
             , b.emoticon_detail_id
             , b.emoticon_img_nm
             , b.img_ext_nm
             , b.img_file_size
             , b.file_url_path
        from emoticon_detail a
        left outer join emoticon_img b
          on a.emoticon_detail_id  = b.emoticon_detail_id
        where emoticon_id = #{emoticonId}
    </select>

    <!-- 이모티콘 기본 정보 조회 -->
    <select id="getEmoticonInfo"
            parameterType="com.pjt.core.emoticon.dto.ReadEmoticonRequestDto"
            resultType="com.pjt.core.emoticon.dto.ReadEmoticonDetailResponseDto">
        /* emoticonMapper.getEmoticonInfo */
        select
              a.emoticon_id
            , a.emoticon_title
            , a.emoticon_price
            , (select
                   count(f.emoticon_id)
                 from favorite f
                where f.emoticon_id = a.emoticon_id
               ) as favorite_count
            , (select
                   case when count(b.emoticon_id) >= 1 then 'Y'
                        else 'N'
                       end
                 from favorite b
                where b.emoticon_id = a.emoticon_id
                  and b.user_id = #{userId}
               ) as favorite_yn
          from emoticon a
         where a.emoticon_id = #{emoticonId}
    </select>

    <!-- 이모티콘 이미지 조회 -->
    <select id="getEmoticonImg"
            parameterType="string"
            resultType="com.pjt.core.emoticon.entity.EmoticonImg">
        /* emoticonMapper.getEmoticonImg */
        select
              emoticon_img_no
            , emoticon_detail_id
            , emoticon_img_nm
            , img_ext_nm
            , img_file_size
            , file_url_path
          from emoticon_img
         where emoticon_detail_id = #{emoticonDetailId}
    </select>

    <!-- 이모티콘 등록하기 -->
    <insert id="createEmoticon"
            parameterType="com.pjt.core.emoticon.dto.CreateEmoticonRequestDto"
            useGeneratedKeys="true"
            keyProperty="emoticonId">
        /* emoticonMapper.createEmoticon */
        insert into emoticon
        (
            emoticon_title
          , emoticon_price
          , reg_dt
          , reg_id
          , upd_dt
          , upd_id
        )
        values
        (
            #{emoticonTitle}
          , #{emoticonPrice}
          , localtimestamp
          , #{userId}
          , localtimestamp
          , #{userId}
        )
    </insert>

    <!-- 이모티콘 상세 등록-->
    <insert id="createEmoticonDetail"
            parameterType="com.pjt.core.emoticon.dto.CreateEmoticonDetailRequestDto"
            useGeneratedKeys="true"
            keyProperty="emoticonDetailId">
        /* emoticonMapper.createEmoticonDetail */
        insert into emoticon_detail
        (
            emoticon_id
          , emoticon_nm
          , reg_dt
          , reg_id
         )
        values
        (
            #{emoticonId}
          , #{emoticonNm}
          , localtimestamp
          , #{userId}
        )
    </insert>

    <insert id="insertImoticon"
            parameterType="com.pjt.core.board.dto.FileResponseDto">
        insert into emoticon_img
        (
            emoticon_detail_id
          , emoticon_img_nm
          , img_ext_nm
          , img_file_size
          , file_url_path
        )
        values
        (
            #{emoticonDetailId}
          , #{emoticonImgNm}
          , #{imgExtNm}
          , #{imgFileSize}
          , #{fileUrlPath}
        )
    </insert>



</mapper>